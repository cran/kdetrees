\documentclass{article}
%\VignetteIndexEntry{Using KDETrees}
%\usepackage{fullpage}
\title{Using KDETrees}
\author{Grady Weyenberg}

<<preamble,echo=FALSE,results=hide>>=
ops <- options(width=60)
library(kdetrees)
@ 
\begin{document}
\maketitle

\section{Introduction}
\label{sec:introduction}

KDETrees is a tool for finding discordant phylogenetic trees. It takes
as input an {\tt ape::multiPhylo} object, which contains a set of
trees, and produces a score for each tree. (A list of {\tt phylo}
objects is also accepted.) High scores mean the tree is relatively
similar to other trees in the sample, while low scores indicate that
the tree in question may be discordant with the others. Low scoring
trees are identified as putative ``outliers'' with the cutoff
controlled by a tuning parameter $k$, and their contribution to the
calculation is removed.


\section{Using {\tt kdetrees}}
\label{sec:use}
The simplest method of using the software is the {\tt
  kdetrees.complete} function. This is a convienence function which
will do all the steps of the analysis at once. The simplest use is to
simply pass it the filename of a Newick file containing the trees to
be analyzed. It will write several result files to the R working
directory ({\tt getwd}).

This call assumes there is a file containing newick formatted trees
called {\tt trees.tre} in the current working directory. It will write
out 4 files: {\tt outliers.tre} a newick file containing only the
trees identified as outliers; {\tt results.csv} a csv files with the
density estimates; {\tt plot.png} and {\tt hist.png} are diagnostic images.

<<kdetrees.complete,eval=FALSE>>=
kdetrees.complete("trees.tre")
@ 

The {\tt kdetrees.complete} function also accepts any of the
parameters accepted by the {\tt kdetrees} function, as described in
Sections \ref{sec:running-kdetrees} and \ref{sec:advanced-options}.


\subsection{Importing Trees}
\label{sec:importing-trees}

Trees may be imported using any of the methods provided by {\tt
  ape}. (See {\tt ?read.tree} and {\tt ?read.nexus} for examples.) In
the following examples, many functions are a part of the {\tt ape}
package, and it is recommended that you import it. For example, to
load the {\tt apicomplexa} dataset, I placed the Newick tree strings
into the {\tt apicompexa.tre} file and used the following command:
<<read.tree,eval=FALSE>>=
blibrary(ape)
apicomplexa <- read.tree("apicomplexa.tre")
@ 

\subsection{Running kdetrees}
\label{sec:running-kdetrees}

The simplest way to run {\tt kdetrees} is to call the function of the
same name, with the list of trees as the first argument.
<<kdetrees>>=
result <- kdetrees(apicomplexa)
result
@ 

There are 3 main settings which control the method used in the
analysis: the outlier detection tuning parameter, the distance
computation method, and whether or not to include branch length
information in the distance calculation. These are controlled by the
parameters {\tt k}, {\tt distance}, and {\tt topo.only},
respectively. By default the geodesic distance with branch lengths is
used, with a tuning parameter of $k=1.5$.

For example, this call uses topology-based dissimilarity map distance.
<<kdetrees.diss,eval=FALSE>>=
kdetrees(apicomplexa, k=1.25, distance="diss", topo.only=TRUE)
@ 

\begin{figure}
  \centering
<<plot,fig=TRUE,height=4>>=
plot(result)
@ 
<<hist,fig=TRUE,height=4>>=
hist(result)
@   
  \caption{Diagnostic plots can be created with {\tt plot} and {\tt
      hist}.}
  \label{fig:diagplots}
\end{figure}

One can {\tt plot} or {\tt hist} the result object to create
diagnostic plots. The {\tt plot} and {\tt hist} methods use the
{\tt ggplot2} package, not base graphics, thus you can modify them as
you see fit. See Figure \ref{fig:diagplots} for example plots.

\subsection{Results}
\label{sec:results}

The result object is a list with three components, as well as several
attributes that are used internally.  The first element, {\tt
  density}, has the computed score for each tree in the input
list. This is the variable displayed in the diagnostic plots. The
second elemen,t {\tt i}, contains the indices of the low scoring trees
which were not included in the calculations. Finally, the {\tt
  outliers} element contains the trees which were identified as
outliers.

One might then wish to look at a plot of the putative outlier
trees. Here I plot the lowest scoring tree in the apicomplexa
dataset. It appears that something bad happened during the
reconstruction of this tree, causing one branch to be much longer
than the others.

  \begin{figure}[h]
    \centering
<<outlierplot,fig=TRUE,height=4>>=
plot(result$outliers[[1]])
@       
    \caption{A plot of an outlying tree.}
    \label{fig:treeplot}
  \end{figure}


If you would like to export the outlier trees to a file, you may use
the {\tt write.tree} function in the {\tt ape} package. Data frames
can also be created from the result object.
<<write.tree,eval=FALSE>>=
write.tree(result$outliers,file="outliers.tre")
as.data.frame(result)
@ 

\subsection{Advanced Options}
\label{sec:advanced-options}
Currently, kdetrees uses an adaptive bandwidth method based on a
nearest-neighbor calculation by default. It is possible to control the
number of trees used to define the neighborhood, or disable the
adaptive method entirely and provide a constant bandwidth, using the
{\tt bw} parameter. If {\tt bw} is passed as a list, the list is used
as a set of parameters for a call to {\tt bw.nn}. For example, to
change the neighborhood to include 50\% of the sample we pass the
following option.
<<adv1,eval=FALSE>>=
kdetrees(apicomplexa, bw=list(prop=0.5))
@ 
If {\tt bw} is set to a single number, a constant bandwidth is used.
<<adv2,eval=FALSE>>=
kdetrees(apicomplexa, bw=6)
@ 

\subsection{CLI}
\label{sec:CLI}

CLI use can be achieved by using the {\tt Rscript} executable included
with R. For example, this CLI command replicates the first example call in
Section \ref{sec:use}.
\begin{Soutput}
$ Rscript -e 'library(kdetrees); kdetrees.complete("trees.tre")'
\end{Soutput}


\end{document}
<<postamble,echo=FALSE,results=hide>>=
options(ops)
@ 
